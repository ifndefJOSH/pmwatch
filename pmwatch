#!/usr/bin/env python3

'''
A simple program that watches memory usage for a process and reports its max usage

Written by Josh Jeppson (ifndefJOSH)

Licensed under the MIT license.

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
'''

import psutil
import subprocess
import time
import sys
import os
# import threading

INTERVAL=0.001
MAX_MEM=0

def startProcess(command) -> tuple: # psutil.Process:
	pr = subprocess.Popen(command)
	return psutil.Process(pr.pid), pr

def getMemoryUsage(proc : psutil.Process) -> int:
	return proc.memory_info().rss

def pollProcess(proc : psutil.Process, popen : subprocess.Popen):
	'''
Thread function handler for process memory usage watching
	'''
	global MAX_MEM
	maxMemUsage = 0
	# print("Polling memory...")
	while proc.status() != psutil.STATUS_ZOMBIE and popen.pid in psutil.pids():
		try:
			curMemUsage = getMemoryUsage(proc)
		except psutil.NoSuchProcess:
			MAX_MEM = maxMemUsage
			return
		maxMemUsage = max(maxMemUsage, curMemUsage)
		# print(f"Poll {maxMemUsage} bytes")
		time.sleep(INTERVAL)

	MAX_MEM = maxMemUsage

if __name__=="__main__":
	if len(sys.argv) < 2:
		print("Can't monitor no process! (Try `--help` or provide your process args)")
		exit(1)
	if "--help" in sys.argv or "-h" in sys.argv:
		print(f"""pmwatch -- (p)[rocess|olling] (m)[ax|emory] (watch)er
	A simple tool for watching process memory and reporting the max usage.
Usage:
	pmwatch [process args...]
	Set polling interval (in seconds) by setting PMWATCH_INTERVAL environment variable (Default: {INTERVAL})""")
		exit(0)
	
	if "PMWATCH_INTERVAL" in os.environ:
		try:
			INTERVAL = int(os.environ["PMWATCH_INTERVAL"])
		except ValueError:
			print(f"Cannot use non-parsable interval of {os.environ['PMWATCH_INTERVAL']}")
			sys.exit(1)

	procArgs = sys.argv[1::]
	proc, pr = startProcess(procArgs)
	# _, _ = pr.communicate()
	# Just run the polling in the main thread
	pollProcess(proc, pr)
	#t = threading.Thread(target=pollProcess, args=(proc, pr, ))
	#t.run()
	#t.join()
	memStr = ""
	if MAX_MEM >= 1073741824:
		memStr = f"{MAX_MEM / 1073741824} GB"
	elif MAX_MEM >= 1048576:
		memStr = f"{MAX_MEM / 1048576} MB"
	elif MAX_MEM >= 1024:
		memStr = f"{MAX_MEM / 1024} kB"
	else:
		memStr = f"{MAX_MEM} B"
	print(f"At polling interval of {INTERVAL} seconds, this process took at most {memStr} of memory")
